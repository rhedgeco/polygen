import "utils/utils" as utils;
import "csharp/render" as render;
import "csharp/process" as process;

fn struct(struct) {
    if this.structs == () { this.structs = #{}; }
    if this.structs.contains(struct.name) {
        throw `Cannot export multiple structs with the name '${struct.name}'`;
    }

    this.structs[struct.name] = process::struct(struct);
}

fn function(function) {
    if this.functions == () { this.functions = #{}; }
    if this.functions.contains(function.name) {
        throw `Cannot export multiple functions with the name '${function.name}'`;
    }

    this.functions[function.name] = process::function(function);
}

fn impl(impl) {
    if this.impls == () { this.impls = #{}; }
    if this.impls.contains(impl.name) {
        throw `Cannot export multiple impls with the name '${impl.name}'`;
    }

    this.impls[impl.name] = process::impl(impl);
}

fn render() {
    // ensure all items exist
    if this.structs == () { this.structs = #{}; }
    if this.functions == () { this.functions = #{}; }
    if this.impls == () { this.impls = #{}; }

    // render all library items
    let all_impls = this.impls;
    let library_items = utils::render_each(this.structs.values(), "\n\n", |struct| {
        let impl = all_impls[struct.name];
        let inner = utils::render_each(struct.fields, "\n", |field| render::struct_field(field));
        if impl != () {
            inner += "\n\n" + utils::render_each(impl.functions, "\n\n", |implfn| render::struct_function(PACKAGE_NAME, implfn));
        }
        
        render::struct(struct, inner)
    });
    let functions = utils::render_each(this.functions.values(), "\n\n", |func| render::function(PACKAGE_NAME, func));
    if functions != "" { library_items += "\n\n" + functions; }

    // render final output template
    let output = docformat(`
        using System;
        using System.Runtime.InteropServices;

        poly-static-class
    `);

    // replace placeholder text with rendered static class
    let static_class = render::static_class(PACKAGE_NAME, library_items);
    let output = replace(output, "poly-static-class", static_class);

    // create a comment to tag the beginning of the file
    let generated_comment = docformat(`
        // automatically generated by polygen
        // https://github.com/rhedgeco/polygen
    `);

    // return rendered file with a newline
    return generated_comment + "\n\n" + output + "\n";
}
