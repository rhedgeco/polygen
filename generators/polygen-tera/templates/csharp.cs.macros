{%- macro render_module(module) -%}
public static class {{ module.name | to_pascal_case }}
{
{%- for struct in module.structs %}
    {{ self::render_struct(struct=struct) | indent(prefix="    ") }}
{% endfor %}

{%- for func in module.functions %}
    {{ self::render_func(func=func) | indent(prefix="    ") }}
{% endfor -%}

{%- for _, module in module.modules %}
    {{ self::render_module(module=module) | indent(prefix="    ") }}
{% endfor -%}
}
{%- endmacro render_module -%}

{%- macro render_struct(struct) -%}
public class {{ struct.name }}
{
    private Data _data;
    public readonly ref Data data => ref _data;

    internal {{ struct.name }}(Data newData)
    {
        this._data = newData;
    }

    internal struct Data
    {
    {%- for field in struct.fields %}
        private {{ self::render_field_type(ty=field.ty) }} {{ field.name }};
    {%- endfor %}
    }
}
{%- endmacro render_struct -%}


{%- macro render_func(func) -%}
{%- set inputs = func.params.inputs -%}
{%- set output = func.params.output -%}
[DllImport("lib_name", CallingConvention = CallingConvention.Cdecl)]
private static extern {{ self::render_typedata(type=output) }} {{ func.export_name }}(
    {%- for input in inputs -%}
    {%- if loop.index > 1 -%}, {% endif -%}
    {{ self::render_typedata(type=input.ty) }} {{ input.name | to_camel_case }}
    {%- endfor -%}
);
private static {{ self::render_type(type=output) }} {{ func.name | to_pascal_case }}(
    {%- for input in inputs -%}
    {%- if loop.index > 1 -%}, {% endif -%}
    {{ self::render_type(type=input.ty) }} {{ input.name | to_camel_case }}
    {%- endfor -%}
) => {% if output.struct %}new {{ self::render_type(type=output) }}({% endif %}{{ func.export_name }}(
    {{- inputs | map(attribute="name") | join(sep=", ") -}}
){% if output.struct %}){% endif %};
{%- endmacro render_func -%}


{%- macro render_field_type(ty) -%}
{% if ty.generic %}{{ ty.generic }}{% else %}{{ self::render_typedata(type=ty.typed) }}{% endif %}
{%- endmacro render_field_type -%}


{%- macro render_type(type) -%}
{{ self::render_typedata(type=type) | trim_end_matches(pat=".Data") }}
{%- endmacro render_type -%}


{%- macro render_typedata(type) -%}
{%- if not type -%}
    void
{%- elif type.primitive -%}
    {% if type.primitive == "bool" -%}bool
    {%- elif type.primitive == "u8" -%}byte
    {%- elif type.primitive == "u16" -%}ushort
    {%- elif type.primitive == "u32" -%}uint
    {%- elif type.primitive == "u64" -%}ulong
    {%- elif type.primitive == "usize" -%}nuint
    {%- elif type.primitive == "i8" -%}sbyte
    {%- elif type.primitive == "i16" -%}short
    {%- elif type.primitive == "i32" -%}int
    {%- elif type.primitive == "i64" -%}long
    {%- elif type.primitive == "isize" -%}nint
    {%- elif type.primitive == "f32" -%}float
    {%- elif type.primitive == "f64" -%}double
    {%- else -%}UNKNOWN_PRIMITIVE
    {%- endif -%}
{%- else -%}
    {%- set modules = type.struct.module | split(pat="::") | slice(start=1) -%}
    {%- for module in modules -%}
        {{ module | to_pascal_case }}.
    {%- endfor -%}
    {{ type.struct.name | to_pascal_case }}.Data
{%- endif -%}
{%- endmacro render_typedata -%}
